System Architecture
Architectural Design
The AI Orchestrator is a cloud-native, document-driven GenAI backend that extracts structured information from uploaded files, maps it to business objects, identifies actions, and invokes existing backend APIs — all powered by Azure OpenAI and deployed on Oracle Cloud Infrastructure (OCI).
1. Deployment Environment
Environment Type
	Description
	Cloud (OCI)
	All workloads are hosted in Oracle Cloud Infrastructure
	OKE (Kubernetes)
	FastAPI orchestrator, Kafka workers, ChromaDB are containerized and deployed on Oracle Kubernetes Engine
	Azure Cloud
	Azure OpenAI GPT-4o model is accessed remotely via API
	External
	Okta (Authentication provider) and AWS MKS (CDC pipeline) are integrated as managed services
	

 High-Level System Components
1. Angular UI (Enhanced)
* Hosts the chatbot panel for document upload and user feedback

* Sends API calls to FastAPI orchestrator

* Presents extracted/mapped data and feedback UI

2. FastAPI Orchestrator (Core Service)
   * /extract: Sends document content to Azure OpenAI for field extraction

   * /map: Maps extracted fields to internal schema using YAML-based rules(Mapping System)

   * /identify: Identifies document intent or required action

   * /invoke: Calls existing Spring Boot APIs with prepared payload

   * Validates JWT from Okta and derives tenant context

3. Spring Boot Microservices
      * Existing business logic endpoints (order creation, invoice update, etc.)

      * Orchestrator calls these services using secured REST APIs

      * Hosted on OCI within same private VCN

4. Object Storage (OCI)
         * Stores uploaded documents (PDF) under tenant-scoped prefixes

         * Temporary storage; cleanup happens via offboarding routine

5. Azure OpenAI (GPT-4o)
            * Processes document content (PDF→ JSON)

            * Called directly from FastAPI using key stored in OCI Vault

6. OCI Vault
               * Manages secrets like OpenAI API keys, Okta issuer info, Spring API auth

               * Accessed via Instance Principals by services running in OKE

7. Observability (OCI Monitoring & Logging)
                  * OpenTelemetry-based traces for each FastAPI endpoint

                  * Custom metrics (latency, error rate, token usage)

                  * Fluent Bit sends structured logs to OCI Logging

 Supporting Components
8. Helm + Terraform
                     * Helm: Deploys FastAPI, ChromaDB, probes, and envs on Kubernetes

                     * Terraform: Provisions infrastructure (OKE, Vault, NSGs, Registry)

9. CI/CD Pipeline
                        * GitHub Actions for image builds, Helm-based deploys to OKE

                        * Canary rollout enabled per environment with auto-rollback

Hardware/Software Mapping
1. Cloud Infrastructure Overview


Platform
	Role
	OCI
	Primary compute platform for all services
	OKE (Kubernetes)
	Hosts all containerized workloads (FastAPI, Kafka consumers, embedding workers)
	OCI Vault
	Stores secrets used by orchestrator and services
	OCI Object Storage
	Stores user-uploaded documents
	Azure OpenAI
	GenAI API for extraction and reasoning
	AWS MKS (Kafka)
	Delivers CDC events for embedding pipeline
	

2. Software → Hardware Mapping Table


Software Component
	Deployment Target
	Resource Type
	Notes
	Angular UI (existing)
	OCI VM or Static Hosting
	Web/Browser + CDN
	Calls backend via HTTPS
	FastAPI Orchestrator
	OKE Cluster (K8s Pods)
	Virtual compute nodes
	Auto-scaled using HPA
	Embedding Worker
	OKE Cluster (Kafka consumer pod)
	Stateless containers
	Consumes CDC from AWS MKS
	ChromaDB (Vector Store)
	OKE StatefulSet
	Persistent volume (PVC)
	Per-tenant collections stored
	Object Storage
	OCI Object Storage
	Cloud-native storage
	Files are tenant-scoped, TTL-enabled
	Azure OpenAI API
	External (Azure cloud)
	Managed API
	Model accessed securely with API key from OCI Vault
	Spring Boot APIs
	OCI Compute VMs or containers
	Private subnet services
	Called by /invoke from orchestrator
	OCI Vault
	OCI Secrets backend
	Managed key vault
	Accessed using Instance Principals (secure)
	OCI Monitoring + Logging
	OCI-native observability tools
	Managed services
	Used via OpenTelemetry traces and Fluent Bit logging
	

3. Node Types in OKE Cluster


Node Pool
	Used By
	Instance Shape
	Notes
	api-nodes
	FastAPI pods
	?Michael Bilberry
	Scales based on HTTP traffic
	worker-nodes
	Kafka consumer workers
	?Michael Bilberry
	Scales based on Kafka lag
	vector-nodes
	ChromaDB stateful storage
	?Michael Bilberry
	Needs persistent storage
	

3. Security Zones
                           * All nodes run inside OCI private subnets.

                           * Ingress controller routes external traffic via TLS.

                           * Vault and Object Storage are accessed using Instance Principals
4. External Services & Access Patterns
External Service
	Accessed By
	Protocol
	Purpose
	Azure OpenAI
	FastAPI Orchestrator
	HTTPS
	Document extraction, action detection
	AWS MKS (Kafka)
	Embedding Worker
	Kafka
	CDC event ingestion
	Okta Identity Cloud
	UI → FastAPI
	HTTPS
	JWT issuance and validation
	Data Flow Diagram
  

Component Design
Detail the architecture of individual components/modules of the system.
1. Frontend (Angular)
        •        Integrated into the existing web application.
        •        Users upload documents and interact via a chatbot-like interface.
        •        Sends files and queries to FastAPI endpoints on the orchestrator.


2. FastAPI Orchestrator (OKE)
        •        Receives user input and documents.
        •        Calls Azure OpenAI to extract structured data from text.
•        Maps extracted fields using pre-defined transformation rules based on the  Tenant.
        •        Calls existing Spring Boot APIs for order creation, validation, etc.
        •        Validates Okta JWTs and enforces tenant-level access control.


3. Spring Boot Microservices (OCI)
        •        Already deployed in the ecosystem.
        •        Handle core business operations like order creation, invoice processing.
        •        Now invoked via FastAPI instead of only the frontend.
4. Azure OpenAI
        •        Called by FastAPI for:
        •        Document field extraction (via LLM completion).
        •        (In future: embeddings and similarity search.)
        •        Responses are parsed and transformed before downstream calls.
5. OCI Vault
        •        FastAPI and workers use Instance Principals to fetch:
        •        Azure OpenAI keys
        •        Okta details
        •        DB credentials
        •        Secrets are not hardcoded or manually managed.
6. OCI Object Storage
        •        Uploaded documents are stored temporarily for parsing and audit trail.
        •        Supports versioning and automatic cleanup during tenant offboarding.
7. ChromaDB on OKE
        •        Deployed via Helm inside the OKE cluster.
        •        (For future expansion) Stores vector embeddings for similarity search.


8. CI/CD
        •        GitHub Actions → OCI Registry → Helm-based rollout to OKE.
        •        Terraform is used for reproducible infrastructure setup and tenant onboarding.
Module View
Describe each module/component of the system and its responsibilities.
1. Frontend UI Module
Purpose:
Provide an interactive UI for uploading documents, displaying extracted fields, and managing user feedback.
Responsibility:
                              * Provides users with an interface to upload documents and interact with the AI assistant.

                              * Displays extracted fields and parsed data in a user-friendly form.

                              * Supports feedback submission for corrections and validation.

                              * Integrates seamlessly into the existing RecVue UI as a sub-panel.
Inputs:
                                 * User file uploads (PDF)

                                 * User queries and interactions

                                 * API responses from orchestrator

Outputs:
                                    * Document previews

                                    * Displayed extracted fields

                                    * Feedback payloads
Interfaces:
                                       * POST /extract → extract raw info using Azure OpenAI
                                       * POST /map → apply mapping rules to structure the data
                                       * POST /identify → action detection from document(from context)
                                       * POST /invoke → call existing Spring Boot APIs

Internal Details:
                                          * Built in Angular

                                          * Uses reactive forms for validation

                                          * Manages session state, chat history, and user roles
Dependencies:
                                             * Auth service (Okta token validation)

                                             * FastAPI endpoints’





2. FastAPI Orchestrator Module
Purpose:
Central coordination layer that handles document uploads, LLM-based field extraction, and API orchestration.
Responsibility:
                                                * Core orchestrator handling all user interaction logic.

                                                * Accepts file uploads and user queries via HTTP endpoints.

                                                * Validates Okta JWT tokens and extracts tenant metadata.

                                                * Calls Azure OpenAI APIs to extract structured fields from uploaded documents.

                                                * Maps extracted data into predefined RecVue order schema.

                                                * Forwards structured data to Spring Boot microservices via REST.
                                                * Handles response aggregation and error reporting back to the UI.

                                                * Supports multi-step function calling and token-based routing.

Inputs:
                                                   * Document files or user queries (from frontend)

                                                   * JWT token (for tenant and user info)

Outputs:
                                                      * JSON payload of parsed data

                                                      * Backend API invocation results

                                                      * Search results or function-call responses

Interfaces (Exposed):
                                                         * POST /upload

                                                         * POST /assistant/query

                                                         * GET /healthz

Interfaces (Consumed):
                                                            * Azure OpenAI APIs (chat and embedding)

                                                            * Spring Boot REST APIs (order creation, updates)

                                                            * OCI Vault API (for secret retrieval)

Internal Details:
                                                               * Uses pydantic for data models

                                                               * OpenAI function calling loop

                                                               * JWT middleware for Okta

                                                               * Per-tenant routing logic

                                                               * Transformation engine (loads mapping YAML, applies rules)

Dependencies:
                                                                  * Azure OpenAI

                                                                  * Spring Boot APIs

                                                                  * Vault

                                                                  * Object Storage


3. Document Parser & Mapping Engine
Purpose:
Convert LLM raw outputs into clean, schema-aligned structured data.
Responsibility:
                                                                     * Provides powerful LLM-based inference for:

                                                                        * Field extraction from semi-structured documents (like contracts, orders).

                                                                        * (Optional) Embedding generation for semantic search.

                                                                           * Returns structured JSON, which the orchestrator maps and routes.

                                                                           * Must be called securely with retry/backoff logic to handle rate limits.



Inputs:
                                                                              * Raw LLM JSON response

                                                                              * Pre-defined mapping dictionary

                                                                              * Transformation rules

Outputs:
                                                                                 * Structured order object

                                                                                 * Field-value metadata

Interfaces:
                                                                                    * Internal to FastAPI (used during file upload or query processing)

Internal Details:
                                                                                       * Handles field renaming, type conversion, date normalization

                                                                                       * Supports multiple templates (uses heuristics to identify layout)

Dependencies:
                                                                                          * Mapping YAML/JSON/Configuration files per template


4. Spring Boot Backend APIs
Purpose:
Domain-specific microservices that receive structured data and perform operations like order creation, validation, and status updates.
Responsibility:
                                                                                          * Existing backend systems that handle business workflows like:

                                                                                             * Order creation(Contract Creation- multiple api- order header, order lines, etc)
                                                                                             * Validation and status checks

                                                                                                * Exposed as secured APIs, callable by the FastAPI orchestrator.

                                                                                                * Accept JWTs forwarded from the orchestrator for auth and auditing.

Inputs:
                                                                                                   * JSON payloads from orchestrator

                                                                                                   * JWT (forwarded from user)

Outputs:
                                                                                                      * Success/failure messages

                                                                                                      * Order IDs or status updates

Interfaces:
                                                                                                         * /api/orders/create( creating contract : includes clearing order header, line items, …,.etc)


Internal Details:
                                                                                                            * Handles database persistence and business rules

                                                                                                            * May trigger downstream workflows 

Dependencies:
                                                                                                               * Oracle DB

                                                                                                               * Auth provider (Okta)



5. Azure OpenAI Integration Module
Purpose:
Invoke GPT models for parsing unstructured documents and extracting relevant fields.
Responsibility:
                                                                                                                  * Provides powerful LLM-based inference for:

                                                                                                                     * Field extraction from semi-structured documents (like contracts, orders).

                                                                                                                     * (Optional) Embedding generation for semantic search.

                                                                                                                        * Returns structured JSON, which the orchestrator maps and routes.

                                                                                                                        * Must be called securely with retry/backoff logic to handle rate limits.

Inputs:
                                                                                                                           * Prompt template + document text

                                                                                                                           * Chat completion parameters

Outputs:
                                                                                                                              * Structured JSON from the LLM

                                                                                                                              * Tokens used / usage metadata

Interfaces:
                                                                                                                                 * Azure OpenAI Chat Completion endpoint

                                                                                                                                 * (Optional) Embeddings endpoint

Internal Details:
                                                                                                                                    * Handles retries, backoff, token counting

                                                                                                                                    * Models used: GPT-4o (as per cost/performance target)

Dependencies:
                                                                                                                                       * Azure OpenAI keys (from Vault)

                                                                                                                                       * Prompt templates


6. Object Storage Module (OCI)
Purpose:
Persist uploaded documents for traceability, audit, and fallback.
Responsibility:
                                                                                                                                          * Stores uploaded documents (PDF, Word, scanned contracts).

                                                                                                                                          * Retains documents for audit, traceability, and model debugging.

                                                                                                                                          * Enforces auto-delete lifecycle rules.

                                                                                                                                          * Used during offboarding to purge tenant-specific files before DB deletion.
Inputs:
                                                                                                                                             * Document files from frontend

Outputs:
                                                                                                                                                * Pre-signed URLs for access (optional)

                                                                                                                                                * Metadata used for tracking uploads



Interfaces:
                                                                                                                                                   * OCI Object Storage SDK

Internal Details:
                                                                                                                                                      * Lifecycle policies for auto-delete

                                                                                                                                                      * Per-tenant bucket or prefix

                                                                                                                                                      * Offboarding script clears contents



Dependencies:
                                                                                                                                                         * Vault (for auth config)

 
7. Vault Secrets Module (OCI)
Purpose:
Secure storage for sensitive secrets used by the orchestrator and workers.
Responsibility:
                                                                                                                                                            * Stores all sensitive credentials securely:

                                                                                                                                                               * Azure OpenAI API keys

                                                                                                                                                               * Okta app secrets

                                                                                                                                                               * Oracle DB creds

                                                                                                                                                                  * Accessed by FastAPI and worker pods using OCI Instance Principals.

                                                                                                                                                                  * Prevents hardcoding or static secret files in images.



Secrets Managed:
                                                                                                                                                                     * OpenAI API key

                                                                                                                                                                     * Okta client ID/secret

                                                                                                                                                                     * Oracle DB credentials

Interfaces:
                                                                                                                                                                        * OCI Vault Secret Read API

Internal Details:
                                                                                                                                                                           * Accessed via Instance Principal

                                                                                                                                                                           * Secrets are not mounted but read dynamically at runtime

Dependencies:
                                                                                                                                                                              * IAM policies

                                                                                                                                                                              * K8s service account
8. CI/CD & Infra-as-Code Module
Purpose:
Automated deployment and environment provisioning.


Responsibility:
                                                                                                                                                                                 * Automates infrastructure provisioning and app deployment:

                                                                                                                                                                                    * Terraform handles infrastructure modules (OKE, Vault, Object Storage).

                                                                                                                                                                                    * Helm manages Kubernetes deployments (orchestrator, ChromaDB).

                                                                                                                                                                                    * GitHub Actions builds Docker images, pushes to OCI Registry, and triggers Helm rollout.

                                                                                                                                                                                       * Supports blue/green or canary rollouts with rollback on SLO violations.



9. Observability Stack
Purpose:
Enable debugging, monitoring, and health tracking.
Responsibility:
                                                                                                                                                                                          * Captures traces, metrics, and logs across all services.

                                                                                                                                                                                          * FastAPI emits request traces using OpenTelemetry.

                                                                                                                                                                                          * Custom metrics emitted:

                                                                                                                                                                                             * Token usage per tenant

                                                                                                                                                                                             * API latency (e.g., extraction time, vector search time)

                                                                                                                                                                                             * CDC lag and vector insert delay

                                                                                                                                                                                                * Dashboards and alerts configured via OCI Monitoring.



Inputs:
                                                                                                                                                                                                   * Trace spans

                                                                                                                                                                                                   * Custom metrics (token usage, latency, embedding lag)

Outputs:
                                                                                                                                                                                                      * Logs (OCI Logging)

                                                                                                                                                                                                      * Dashboards (OCI Monitoring)

Interfaces:
                                                                                                                                                                                                         * OpenTelemetry SDK

                                                                                                                                                                                                         * OCI Metrics and Logging APIs

Internal Details:
                                                                                                                                                                                                            * Prometheus-style counters for API latency

                                                                                                                                                                                                            * Traces exported from FastAPI via OpenTelemetry (OTel)





Class Diagrams
  

Sequence Diagrams(component level has to added later)
  

 


Interface Design
Application Programming Interface (API)
The AI Orchestrator exposes the following core endpoints via its FastAPI service. Each endpoint performs a discrete task in the document-to-action pipeline and interacts with Azure OpenAI, internal mapping logic, and downstream Spring Boot APIs.
1. POST /extract
Purpose:
Processes a document and extracts raw, unstructured information using Azure OpenAI.
Input:
multipart/form-data
Behavior:
                                                                                                                                                                                                               * Stores document in Object Storage.

                                                                                                                                                                                                               * Sends extracted text to Azure OpenAI with a system prompt.(will be replaced by OCR)

                                                                                                                                                                                                               * Returns raw extracted content (not yet mapped).
2. POST /map
Purpose:
Applies transformation and mapping logic to raw extracted fields and aligns them to your internal schema.
Behavior:
                                                                                                                                                                                                                  * Loads mapping rules and transformations from the SetupConfigurationEngine.

                                                                                                                                                                                                                  * Applies normalization, field renaming, data typing, etc.

                                                                                                                                                                                                                  * Validates schema alignment.
3. POST /identify (aka Identify_actions)
Purpose:
Analyzes the document to identify what actions need to be taken (e.g. create order, update contract, flag missing info).
Behavior:
                                                                                                                                                                                                                     * Calls Azure OpenAI with an action-classification prompt.

                                                                                                                                                                                                                     * Returns high-level actions that will guide the /invoke step.

                                                                                                                                                                                                                     * May also return template/category if applicable.
4. POST /invoke
Purpose:
Invokes existing backend APIs (Spring Boot services) using the mapped, structured payload.
Behavior:
                                                                                                                                                                                                                        * Uses OpenAI function-calling or static routing to choose the right backend API.

                                                                                                                                                                                                                        * Authenticates using Okta JWT; forwards user token.

                                                                                                                                                                                                                        * Handles 2xx/4xx/5xx error parsing and response shaping.

 Security & Auth
                                                                                                                                                                                                                           * Every API call requires a JWT in Authorization: Bearer header, issued by Okta.

                                                                                                                                                                                                                           * The orchestrator validates JWTs and extracts the tenant/user context.

                                                                                                                                                                                                                           * Internal RBAC checks are enforced during /map, /identify, and /invoke.



External Interfaces
1. Azure OpenAI API
Type: External Cloud-based Language Model API
Used by: /extract, /identify, /map (indirectly)
Provider: Azure OpenAI Service (hosted GPT-4 / GPT-4o models)
Interface Contract
                                                                                                                                                                                                                              * Endpoint (example): https://<your-resource-name>.openai.azure.com/openai/deployments/<deployment-id>/chat/completions?api-version=2024-03-01-preview(as of now GPT-4o model)

                                                                                                                                                                                                                              * Method: POST

                                                                                                                                                                                                                              * Headers:

                                                                                                                                                                                                                                 * api-key: [from OCI Vault]

                                                                                                                                                                                                                                 * Content-Type: application/json
Security & Access
                                                                                                                                                                                                                                    * All requests are authenticated with API keys fetched from OCI Vault at runtime.

                                                                                                                                                                                                                                    * Access is controlled by rate limits per deployment (e.g., 240 RPM, 60K tokens/min).

                                                                                                                                                                                                                                    * Failures are retried with exponential backoff in OpenAIClient.
SLA & Latency Expectations
                                                                                                                                                                                                                                       * Typical latency: 300–1500 ms depending on model size (GPT-4o being faster).

                                                                                                                                                                                                                                       * Retry policy: 3 attempts, exponential backoff, with circuit breaker for throttling.








2. Okta (OAuth 2.0 + JWT Identity Provider)
Purpose:
User authentication and authorization. Validates JWT tokens passed from the Angular UI to the orchestrator.
Protocol:
                                                                                                                                                                                                                                          * JWT validation (asymmetric RS256 signature(assumption))

                                                                                                                                                                                                                                          * OpenID Connect for user claims

Used by:
                                                                                                                                                                                                                                             * All FastAPI endpoints (/extract, /map, /identify, /invoke)

Endpoint Example:
                                                                                                                                                                                                                                                * https://<okta-domain>/oauth2/default/.well-known/openid-configuration

Authentication Mechanism:
                                                                                                                                                                                                                                                   * JWT bearer token passed in Authorization: Bearer <token> header

                                                                                                                                                                                                                                                   * Tokens contain sub, email, tenant_id, and roles

Risks & Constraints:
                                                                                                                                                                                                                                                      * Clock skew → token expiry failures

                                                                                                                                                                                                                                                      * Role misconfiguration → authorization bugs

                                                                                                                                                                                                                                                      * External identity outage could impact access

 Internal Interfaces
1. Spring Boot Microservices
Purpose:
Business logic and operations — e.g., order creation, invoice updates, contract amendments.
Protocol:
                                                                                                                                                                                                                                                         * RESTful HTTP (POST, PUT)

                                                                                                                                                                                                                                                         * JSON payloads

                                                                                                                                                                                                                                                         * JWT-based authorization

Accessed By:
                                                                                                                                                                                                                                                            * FastAPI Orchestrator via /invoke endpoint

Example Endpoints:
                                                                                                                                                                                                                                                               * /api/orders/create (includes many apis like order header, order lines and others)

Security:
                                                                                                                                                                                                                                                                  * Orchestrator forwards Okta-issued JWT

                                                                                                                                                                                                                                                                  * Spring services validate token and apply RBAC

Notes:
                                                                                                                                                                                                                                                                     * Contracts must be stable — any schema change needs sync with mapping logic

                                                                                                                                                                                                                                                                     * Responses are logged for audit


2. OCI Vault
Purpose:
Secure storage for secrets used by the orchestrator and workers (e.g., API keys, DB creds).
Protocol:
                                                                                                                                                                                                                                                                        * OCI SDK via Instance Principal

                                                                                                                                                                                                                                                                        * Vault Secret Get API

Accessed By:
                                                                                                                                                                                                                                                                           * FastAPI Orchestrator

                                                                                                                                                                                                                                                                           * Kafka consumer (embedding worker)

Data:
                                                                                                                                                                                                                                                                              * openai-api-key

                                                                                                                                                                                                                                                                              * okta-client-secret

                                                                                                                                                                                                                                                                              * oracle-db-creds

Security:
                                                                                                                                                                                                                                                                                 * IAM policies restrict which service accounts can access which secrets

                                                                                                                                                                                                                                                                                 * Vault is namespace/tenant-aware


3. OCI Object Storage
Purpose:
Stores uploaded documents (PDF)and optionally parsed snapshots for traceability.
Protocol:
                                                                                                                                                                                                                                                                                    * OCI Object Storage SDK

                                                                                                                                                                                                                                                                                    * PUT, GET, DELETE operations

Accessed By:
                                                                                                                                                                                                                                                                                       * FastAPI Orchestrator

                                                                                                                                                                                                                                                                                       * Offboarding script

Structure:
                                                                                                                                                                                                                                                                                          * Bucket per environment (e.g., doc-store-dev)

                                                                                                                                                                                                                                                                                          * Tenant prefix (e.g., tenant-a/)

                                                                                                                                                                                                                                                                                          * Object naming convention: tenant-id/document-type/timestamp-filename.pdf

Notes:
                                                                                                                                                                                                                                                                                             * Lifecycle policies clean up old files

                                                                                                                                                                                                                                                                                             * Files are purged before DB deletion on offboarding


4. ChromaDB (Vector DB on OKE)
Purpose:
Stores vector embeddings generated from contract/order data for similarity search.
Protocol:
                                                                                                                                                                                                                                                                                                * REST or Python client

                                                                                                                                                                                                                                                                                                * Embedding insert, query (top-K), and delete APIs
Accessed By:
                                                                                                                                                                                                                                                                                                   * FastAPI Orchestrator (for /query)

                                                                                                                                                                                                                                                                                                   * Embedding Worker (for insert/update)

Structure:
                                                                                                                                                                                                                                                                                                      * Collection per tenant

                                                                                                                                                                                                                                                                                                      * Metadata tags: record ID, source type, timestamp
Notes:
                                                                                                                                                                                                                                                                                                         * Deployed via Helm into OKE

                                                                                                                                                                                                                                                                                                         * Load-balanced service with autoscaling enabled


5. AWS Managed Kafka Service (MKS)
Purpose:
Transports CDC (Change Data Capture) events from Oracle DB to the embedding pipeline for vector generation.
Protocol:
                                                                                                                                                                                                                                                                                                            * Native Kafka protocol

                                                                                                                                                                                                                                                                                                            * Avro or JSON encoded messages

                                                                                                                                                                                                                                                                                                            * Consumed by Kafka clients (confluent-kafka-python or similar)

Accessed By:
                                                                                                                                                                                                                                                                                                               * Python Kafka Consumer (running in OKE as part of the embedding worker)

Structure:
                                                                                                                                                                                                                                                                                                                  * Topic design:

                                                                                                                                                                                                                                                                                                                     * Per tenant (tenantA-invoices, tenantB-orders) or

                                                                                                                                                                                                                                                                                                                     * Per domain (cdc.customer, cdc.invoice)

Security:
                                                                                                                                                                                                                                                                                                                        * Auth: IAM or SASL/SCRAM authentication (as configured on MKS)

                                                                                                                                                                                                                                                                                                                        * Access managed via Kafka ACLs (per topic or per group)

                                                                                                                                                                                                                                                                                                                        * Private networking: Kafka brokers only accessible within the VPC

Monitoring:
                                                                                                                                                                                                                                                                                                                           * Lag metrics are emitted from the consumer and pushed to OCI Monitoring

                                                                                                                                                                                                                                                                                                                           * Helps detect delays between database change and vector availability

Notes:
                                                                                                                                                                                                                                                                                                                              * Embedding freshness goal: < 30s from DB change to vector in ChromaDB

                                                                                                                                                                                                                                                                                                                              * Topics should be compacted (Kafka log compaction) if needed

6. OCI Monitoring & Logging
Purpose:
Observability stack for metrics, logs, and traces.
Used For:
                                                                                                                                                                                                                                                                                                                                 * API latency, token usage

                                                                                                                                                                                                                                                                                                                                 * CDC lag, vector insert delay

                                                                                                                                                                                                                                                                                                                                 * FastAPI logs, retry traces

Tools:
                                                                                                                                                                                                                                                                                                                                    * OpenTelemetry → OCI Logging

                                                                                                                                                                                                                                                                                                                                    * Metrics pushed to OCI Monitoring dashboard

                                                                                                                                                                                                                                                                                                                                    * Alerts for SLO breach (p95 > 3s, rate-limit hits, etc.)

 
Database Interface
Internal Interface: Oracle Database (via CDC + Schema Mapping)
The AI Orchestrator interacts indirectly with the Oracle database to support document-to-action workflows. It does not perform direct reads/writes during runtime but relies on change streams (CDC) and offline schema discovery to support embedding and mapping logic.
1. Oracle Database (Transactional System of Record)
Purpose:
Stores the ground truth for orders, contracts, invoices, and related entities. Acts as the upstream data source for embedding and semantic search.


Role
	Purpose
	AWS DMS
	Capture change data (insert/update) from Oracle tables
	Embedding Worker (Kafka)
	Consumes Oracle CDC messages via AWS MKS → generates embeddings
	Engineering Team
	Reads schema, joins, and sample data to define mapping rules
	Spring Boot APIs
	Perform actual business operations like order creation/updating
	Tables Involved:
Not sure as of now(should be included)


















Access Pattern


​​
Access Path
	Method
	Description
	Oracle DB → AWS DMS → AWS MKS
	Change Data Capture (CDC)
	Streams record changes as Kafka messages
	FastAPI → Spring APIs → Oracle DB
	Indirect mutation
	No direct DB writes; FastAPI triggers APIs
	Engineering (offline read)
	SQL queries
	Used to build initial mapping schema/rules
	Usage in Mapping Engine
                                                                                                                                                                                                                                                                                                                                       * Schema introspection helps define attribute-to-field mappings

                                                                                                                                                                                                                                                                                                                                       * Templates use this info to auto-align LLM output with business entities

                                                                                                                                                                                                                                                                                                                                       * Example: Effective Date → related field in order_headers_all table


Interface Target
	Type
	Purpose
	Access Mode
	Consumer Component
	Oracle DB
	Internal Database
	Source of record for orders/contracts
	CDC + Read-Only Queries
	AWS DMS / Spring APIs
	AWS DMS
	CDC Pipeline
	Streams Oracle changes into AWS MKS
	Change logs
	Kafka Consumer (Python)
	Spring Boot Services
	API Wrapper
	Perform mutations to DB records securely
	Authenticated REST API
	FastAPI /invoke
	Engineering Tools
	Developer Access
	Query structure + data samples for mapping
	Offline SQL scripts
	SetupConfigEngine
	





 
Detailed Design
 
Database Design
 Database Schema: Tables, Relationships, Indexes
1. mapping_rules
Stores tenant- and template-specific transformation rules in YAML/JSON.


Column Name
	Data Type
	Description
	id
	UUID (PK)
	Unique ID
	tenant_id
	VARCHAR
	Tenant identifier
	template_id
	VARCHAR
	Identifier for document template
	rules_yaml
	TEXT
	YAML or JSON rules blob
	created_at
	TIMESTAMP
	Created timestamp
	updated_at
	TIMESTAMP
	Last updated timestamp
	Indexes:
                                                                                                                                                                                                                                                                                                                                          * IDX_mapping_rules_tenant_template: (tenant_id, template_id)
2. extraction_log
Logs extracted data (from PDF), before any edit.


Column Name
	Data Type
	Description
	id
	UUID (PK)
	Unique ID
	tenant_id
	VARCHAR
	Tenant identifier
	document_id
	VARCHAR
	File or upload identifier
	raw_fields_json
	JSONB
	Extracted fields from OpenAI
	timestamp
	TIMESTAMP
	 Time of extraction
	

Indexes:
                                                                                                                                                                                                                                                                                                                                          * IDX_extraction_tenant_doc: (tenant_id, document_id)

3. user_edits
Stores manual corrections made by users after extraction.
Column Name
	Data Type
	Description
	id
	UUID (PK)
	Unique edit session ID
	extraction_id
	UUID (FK)
	Refers to extraction_log.id
	edited_fields_json
	JSONB
	Edited version of extracted fields
	edited_by
	VARCHAR
	User ID or email
	timestamp
	TIMESTAMP
	 When edit occurred
	Indexes:
                                                                                                                                                                                                                                                                                                                                             * IDX_user_edits_extraction: (extraction_id)
4. action_detection_log
Stores intent/action detected from extracted/mapped data.


Column Name
	Data Type
	Description
	id
	UUID (PK)
	Unique log ID
	extraction_id
	UUID (FK)
	Refers to extraction_log.id
	action_type
	VARCHAR
	e.g., create_order, update_invoice
	model_used
	VARCHAR
	GPT-4, GPT-4o, etc.
	timestamp
	TIMESTAMP
	When action was detected
	

5. review_log
Captures user review confirmation before invoking API.
Column Name
	Data Type
	Description
	id
	UUID (PK)
	Unique review session ID
	user_edit_id
	UUID (FK)
	Refers to user_edits.id
	is_confirmed
	BOOLEAN
	Whether user approved for invoke
	timestamp
	TIMESTAMP
	Time of confirmation
	6. invoke_audit_log
Final payload sent to business APIs and result response.
Column Name
	Data Type
	Description
	id
	UUID (PK)
	Unique ID
	review_id
	UUID (FK)
	Links to review confirmation
	invoked_api
	VARCHAR
	API name or endpoint
	payload_json
	JSONB
	Payload sent
	response_status
	INTEGER
	HTTP status (e.g., 200, 500)
	response_body
	TEXT
	Response from backend API
	timestamp
	TIMESTAMP
	Time of API call
	Relationships
                                                                                                                                                                                                                                                                                                                                             * mapping_rules is queried based on tenant_id + template_id

                                                                                                                                                                                                                                                                                                                                             * extraction_log → user_edits → review_log → invoke_audit_log is a linear chain of document flow

                                                                                                                                                                                                                                                                                                                                             * action_detection_log sits parallel to that, linked to extraction_log





Data Model
Algorithmic Design
Describe any complex algorithms that are part of the system.
 
Security Considerations
 
Security Requirements
1. Authentication
                                                                                                                                                                                                                                                                                                                                                * All incoming requests to the FastAPI orchestrator must include a valid Okta-issued JWT in the Authorization: Bearer <token> header.

                                                                                                                                                                                                                                                                                                                                                * JWTs must be validated using Okta’s public keys.

                                                                                                                                                                                                                                                                                                                                                * The token must contain:

                                                                                                                                                                                                                                                                                                                                                   * sub (user ID),

                                                                                                                                                                                                                                                                                                                                                   * tenant_id (custom claim),

                                                                                                                                                                                                                                                                                                                                                   * and optionally roles or scope.
2. Tenant Isolation
                                                                                                                                                                                                                                                                                                                                                      * Every request must be scoped to a specific tenant_id, derived from the JWT claims.

                                                                                                                                                                                                                                                                                                                                                      * Data stored (e.g., vector embeddings, uploaded files) must be namespaced or partitioned by the tenant.

                                                                                                                                                                                                                                                                                                                                                      * Actions like /invoke must enforce tenant checks before calling backend APIs.
3. Role-Based Access Control (RBAC)
                                                                                                                                                                                                                                                                                                                                                         * Different roles (e.g.,based on our System Profile roles, security admin, ar role) should determine which endpoints a user can access and which actions they can trigger.

                                                                                                                                                                                                                                                                                                                                                         * RBAC rules must be enforced in FastAPI at the route level using a policy middleware.
4. Secrets Management
                                                                                                                                                                                                                                                                                                                                                            * No secrets should be hardcoded or stored in config files.

                                                                                                                                                                                                                                                                                                                                                            * All sensitive values (API keys, DB creds, Okta secrets) must be fetched securely from OCI Vault using Instance Principals.

                                                                                                                                                                                                                                                                                                                                                            * Access to Vault secrets must be scoped per environment and tenant context.



5. Transport Layer Security (TLS)
                                                                                                                                                                                                                                                                                                                                                               * All internal and external communication (between UI, orchestrator, Azure OpenAI, Spring Boot services, etc.) must be encrypted using TLS 1.2+(Not sure about this version, need to get exact one from Michael Bilberry).

                                                                                                                                                                                                                                                                                                                                                               * FastAPI service must run behind a secure ingress controller with TLS termination.


 6. API Rate Limiting & Abuse Prevention
                                                                                                                                                                                                                                                                                                                                                                  * APIs must enforce per-user or per-tenant rate limits to protect against:

                                                                                                                                                                                                                                                                                                                                                                     * Token abuse (LLM call spikes),

                                                                                                                                                                                                                                                                                                                                                                     * Brute-force feedback loops,

                                                                                                                                                                                                                                                                                                                                                                     * Orchestrator overload.

                                                                                                                                                                                                                                                                                                                                                                        * Rate-limit headers should be returned to clients when thresholds are hit.
7. Document & Data Handling
                                                                                                                                                                                                                                                                                                                                                                        * Uploaded documents must:

                                                                                                                                                                                                                                                                                                                                                                           * Be scanned for file type validation (reject executables).

                                                                                                                                                                                                                                                                                                                                                                           * Be stored with tenant-prefixed paths in Object Storage.

                                                                                                                                                                                                                                                                                                                                                                           * Be deleted during tenant offboarding routines.

                                                                                                                                                                                                                                                                                                                                                                              * Raw extracted data must never be logged unless scrubbed.








8. Audit Logging
                                                                                                                                                                                                                                                                                                                                                                              * All sensitive actions (e.g., upload, invoke, feedback) must be logged with:

                                                                                                                                                                                                                                                                                                                                                                                 * Timestamp

                                                                                                                                                                                                                                                                                                                                                                                 * User ID

                                                                                                                                                                                                                                                                                                                                                                                 * Tenant ID

                                                                                                                                                                                                                                                                                                                                                                                 * Operation performed

                                                                                                                                                                                                                                                                                                                                                                                    * Logs must be pushed to OCI Logging and integrated with your audit trail.


9. Infrastructure Access
                                                                                                                                                                                                                                                                                                                                                                                    * Kubernetes nodes (OKE) must not expose public ports by default.

                                                                                                                                                                                                                                                                                                                                                                                    * Access to pods (e.g., kubectl exec) must be role-gated and auditable.

                                                                                                                                                                                                                                                                                                                                                                                    * Helm deployments must validate configuration integrity.
10. Dependency on External Services
                                                                                                                                                                                                                                                                                                                                                                                       * Interactions with Azure OpenAI must:

                                                                                                                                                                                                                                                                                                                                                                                       * Use API keys fetched from Vault

                                                                                                                                                                                                                                                                                                                                                                                       * Respect token usage and limit tracking

                                                                                                                                                                                                                                                                                                                                                                                       * Fail gracefully with retry/backoff and fallback



Security Design
1. Authentication (Okta Integration)
                                                                                                                                                                                                                                                                                                                                                                                          * All frontend-originated requests include a JWT issued by Okta.

                                                                                                                                                                                                                                                                                                                                                                                          * The FastAPI orchestrator uses a dedicated middleware to:

                                                                                                                                                                                                                                                                                                                                                                                             * Validate the JWT signature using Okta’s public keys from the discovery URL.

                                                                                                                                                                                                                                                                                                                                                                                             * Decode claims to extract user ID and tenant_id.

                                                                                                                                                                                                                                                                                                                                                                                                * Requests without a valid token are rejected with 401 Unauthorized
Enforced at: FastAPI layer, before routing to handlers.




2. Tenant Isolation
                                                                                                                                                                                                                                                                                                                                                                                                * All user requests are tagged with a tenant_id extracted from the JWT.

                                                                                                                                                                                                                                                                                                                                                                                                * Upload paths in Object Storage and ChromaDB collections are scoped per tenant:

                                                                                                                                                                                                                                                                                                                                                                                                   * e.g., object-store/{tenant_id}/doc.pdf, chroma.collections.tenant_a_orders

                                                                                                                                                                                                                                                                                                                                                                                                      * API payloads routed via /invoke are checked against the tenant context to avoid cross-tenant leakage.

 Enforced at: Mapping layer, Object Storage client, Vector DB writer, API router.


3. Role-Based Access Control (RBAC)
                                                                                                                                                                                                                                                                                                                                                                                                         * JWT claims contain a roles array (e.g., ["reader", "editor"]).

                                                                                                                                                                                                                                                                                                                                                                                                         * FastAPI applies route-level guards:

                                                                                                                                                                                                                                                                                                                                                                                                            * Only users with editor can call /invoke or /map.

                                                                                                                                                                                                                                                                                                                                                                                                            * reader can only view extraction results or call /extract.

                                                                                                                                                                                                                                                                                                                                                                                                               * Unauthorized role access triggers 403 Forbidden.

 Enforced at: FastAPI decorators or custom auth middleware.


 4. Secrets Management (OCI Vault)
                                                                                                                                                                                                                                                                                                                                                                                                                  * Secrets like the OpenAI API key, Okta client secret, and DB credentials are stored in OCI Vault.

                                                                                                                                                                                                                                                                                                                                                                                                                  * Vault secrets are accessed at runtime using OCI Instance Principals — no credentials are stored in containers or environment files.

                                                                                                                                                                                                                                                                                                                                                                                                                  * Secrets are cached in memory briefly and rotated automatically.

Enforced at: Init/startup of FastAPI app and embedding workers
5. Secure Communication (TLS)
                                                                                                                                                                                                                                                                                                                                                                                                                     * All API endpoints are accessed over HTTPS only.

                                                                                                                                                                                                                                                                                                                                                                                                                     * Internal pod-to-pod traffic in OKE is encrypted via TLS with mutual auth (if required).

                                                                                                                                                                                                                                                                                                                                                                                                                     * External endpoints (Azure OpenAI, Okta) are called over TLS 1.2+ with certificate validation.
Enforced at: NGINX ingress controller, internal service mesh, OpenAI client config.
 6. Rate Limiting & API Protection
                                                                                                                                                                                                                                                                                                                                                                                                                        * FastAPI uses a middleware to enforce:

                                                                                                                                                                                                                                                                                                                                                                                                                           * Global per-user request limit (e.g., 100 req/min)

                                                                                                                                                                                                                                                                                                                                                                                                                           * Burst limits (e.g., 10 requests in 5 seconds)

                                                                                                                                                                                                                                                                                                                                                                                                                              * Exceeded limits return 429 Too Many Requests.

                                                                                                                                                                                                                                                                                                                                                                                                                              * LLM calls to Azure are wrapped with exponential backoff and token caps.

 Enforced at: API gateway or FastAPI middleware layer
7. Document Storage Hygiene
                                                                                                                                                                                                                                                                                                                                                                                                                                 * Only .pdf type is  allowed on upload.

                                                                                                                                                                                                                                                                                                                                                                                                                                 * Uploaded files are stored with a tenant ID prefix and unique ID.

                                                                                                                                                                                                                                                                                                                                                                                                                                 * On tenant offboarding, all files under that tenant’s prefix are deleted via a cleanup script.
Enforced at: /extract handler, Object Storage client, offboarding automation.
8. Audit Logging
                                                                                                                                                                                                                                                                                                                                                                                                                                    * Every major operation (file upload, query, mapping, API invoke, feedback submission) is logged to OCI Logging.

                                                                                                                                                                                                                                                                                                                                                                                                                                    * Logs contain:

                                                                                                                                                                                                                                                                                                                                                                                                                                       * Timestamp

                                                                                                                                                                                                                                                                                                                                                                                                                                       * User ID / tenant

                                                                                                                                                                                                                                                                                                                                                                                                                                       * Action performed

                                                                                                                                                                                                                                                                                                                                                                                                                                       * Success/failure response code

                                                                                                                                                                                                                                                                                                                                                                                                                                          * Sensitive data (e.g., document content) is redacted before logging.

Enforced at: Logging middleware and structured log handlers.
9. Infrastructure Access Controls
                                                                                                                                                                                                                                                                                                                                                                                                                                             * All access to OKE nodes is gated via IAM roles and Kubernetes RBAC.

                                                                                                                                                                                                                                                                                                                                                                                                                                             * Helm charts enforce best practices (e.g., no root user in containers, readonly FS).

                                                                                                                                                                                                                                                                                                                                                                                                                                             * Vault access is limited to named instance principals with tightly scoped policies.

Enforced at: DevOps level — Terraform + Helm + Vault IAM policies.
10. External API Hardening (Azure OpenAI)
                                                                                                                                                                                                                                                                                                                                                                                                                                                * All requests are made with the API key pulled from Vault.

                                                                                                                                                                                                                                                                                                                                                                                                                                                * A Request-ID is passed for traceability.

                                                                                                                                                                                                                                                                                                                                                                                                                                                * Token usage and cost are logged per request.

                                                                                                                                                                                                                                                                                                                                                                                                                                                * If the model call fails, retries are capped to avoid cost spikes or infinite loops.

 Enforced at: OpenAIClient wrapper inside FastAPI.




















 
Scalability and Performance Considerations
 
Performance Requirements
1. Latency Requirements


Operation
	Target Response Time (p95)
	POST /extract
	≤  seconds
	POST /map
	≤  second
	POST /identify
	≤ seconds
	POST /invoke
	≤ seconds
	File upload → Spring API round-trip
	≤  seconds (end-to-end)
	Vector search (top‑K)
	≤  second
	2. Concurrent User Load
                                                                                                                                                                                                                                                                                                                                                                                                                                                   * The system must support up to 50 concurrent users issuing requests across endpoints.

                                                                                                                                                                                                                                                                                                                                                                                                                                                   * The system must maintain 95% of all requests below latency thresholds under this load.

3. LLM Token Limits
                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Individual LLM calls (e.g., extraction, action detection) must:

                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Not exceed 2,000 tokens per prompt/response

                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Fail gracefully if token limits are hit (e.g., with a fallback prompt or truncation)
 4. CDC Embedding Freshness
                                                                                                                                                                                                                                                                                                                                                                                                                                                         * From DB change (via Kafka) → embedding inserted into ChromaDB should complete within:

                                                                                                                                                                                                                                                                                                                                                                                                                                                         * ≤ 30 seconds on average

                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Max retry time: 2 minutes
5. Scalability Expectations
                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Orchestrator deployment must auto-scale based on:

                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Request throughput (FastAPI pods)

                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Kafka message lag (embedding workers)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * Vector DB (ChromaDB) must support ≥ 100K embeddings per tenant with low-latency search.
6. Document Handling Throughput
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * System must be able to process at least:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * 500 documents/day per environment (across tenants)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Average document processing time ≤ 6 seconds (end-to-end)

7. API Error Budget
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        * The system must maintain:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * 99.5% uptime across FastAPI endpoints

                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * ≤ 0.5% error rate (excluding user errors like invalid file types)
 
Performance Design
1. Modular, Decoupled Architecture
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * Each task (extraction, mapping, action detection, API invocation) is handled by dedicated FastAPI endpoints (/extract, /map, /identify, /invoke) for isolation and load-specific tuning.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * Background embedding and vector updates are decoupled from UI interactions via Kafka-based CDC.
Benefit: Prevents blocking, allows for parallel optimization, and isolates performance degradation.
2. Asynchronous, Non-blocking FastAPI Server
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * The FastAPI orchestrator runs on Uvicorn with async I/O to handle high concurrency.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * LLM calls, Vault secret fetches, and API requests are awaited, ensuring the server stays responsive even under load.
Benefit: Can serve 50+ concurrent users with predictable latency.
3. LLM Interaction Optimization
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * OpenAI calls use compact, templated prompts to keep token usage efficient and under control.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * Prompt truncation logic ensures input remains under token limits.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * Retry wrappers implement exponential backoff with circuit breakers for resiliency.


Benefit: Keeps /extract and /identify responses under ______95% of the time.(question for Management Amit Jha Anand Maurya)
 4. In-Memory Caching & Secret Reuse
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * Vault secrets (e.g., OpenAI key, Okta config) are fetched once and cached in-memory with short TTL.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * Mapping dictionaries are preloaded and reused per tenant/template instead of reloading from disk/storage on each request.
Benefit: Reduces config lookup time across endpoints.
5. Kafka Streaming for CDC → Vector Pipeline
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Oracle DB changes are streamed to AWS MKS (Kafka) and consumed by a dedicated embedding worker.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Worker is stateless and horizontally scalable via Kubernetes deployments.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Vector freshness target (<30s) is achieved by parallel processing and checkpointing.

Benefit: Ensures near real-time updates without blocking user flows.
 6. Vector Search Optimization
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * ChromaDB is deployed with:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Collection-per-tenant to minimize index bloat

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Indexed metadata filtering for faster multi-tenant searches

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Top-K queries are tuned for latency (<1s)

 Benefit: Ensures global search and contextual lookups are fast and scalable.
7. Efficient Document Upload Handling
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Uploads use streamed file processing (not in-memory loading).

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * Only supported file type (.pdf) is  accepted and passed through minimal pre-validation before LLM extraction.
Benefit: Keeps /extract fast and resource-light.
8. Monitoring, Auto-scaling, and SLO Tracking
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * OpenTelemetry traces are emitted for every major operation: /extract, /invoke, /identify, etc.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Metrics like p95 latency, CDC lag, OpenAI token usage, and vector indexing lag are tracked in OCI Monitoring.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Kubernetes HPA (Horizontal Pod Autoscaler) is configured for:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * FastAPI pods (based on CPU/RPS)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * Embedding worker pods (based on Kafka lag)

Benefit: System scales reactively and maintains 99.5% uptime under load.
 
Monitoring and Logging
The AI Orchestrator is instrumented end-to-end for observability using logs, traces, and custom metrics. This ensures that system performance, reliability, and behavior can be continuously tracked, alerted on, and debugged in real time.
1. Monitoring Overview


Category
	Monitored Component
	Tooling
	API latency & traffic
	FastAPI orchestrator
	OpenTelemetry + OCI Monitoring
	Background lag
	Kafka consumer (embedding worker)
	Custom CDC lag metrics + OCI
	Token usage & cost
	Azure OpenAI calls
	App metrics + logs
	Vector search latency
	ChromaDB
	Internal logging
	Pod health & readiness
	Kubernetes (OKE)
	Probes + dashboards
	System-level traces
	FastAPI requests, retries, failures
	OpenTelemetry
	2. Metrics and Dashboards
The system emits custom and infrastructure-level metrics:
 Key Metrics
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * http_request_duration_seconds{endpoint="/extract"} — FastAPI endpoint latency

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * openai_token_usage_total — Count of tokens used per tenant/action

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * kafka_cdc_lag_seconds — Lag between DB change and embedding ingestion

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * chroma_vector_upsert_duration — Time to upsert vector into vector DB

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * orchestrator_error_count — Total failed requests per route

 Dashboards
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Built using OCI Monitoring + custom Grafana dashboards

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Tracks SLOs like p95 latency, success rate, CDC freshness

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Alert thresholds for:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * /extract p95 > 3s

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * /invoke errors > 5/min

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * CDC lag > 60s

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Token usage per tenant > budget
3. Distributed Tracing (OpenTelemetry)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * All API requests (FastAPI) are wrapped in OpenTelemetry spans

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Traces include:

equest ID

user ID

esponse status

uration

races are pushed to OCI Logging, linked with service names

llows end-to-end tracing of file → extract → map → identify → invoke

4. Logging
Logging Strategy
tructured JSON logs with fields:

timestamp, tenant_id, user_id, endpoint, status_code, duration_ms, error_message, request_id

og levels: INFO, DEBUG, WARN, ERROR

o raw document content or sensitive values are logged

Logging Locations
ll logs are forwarded to OCI Logging via Fluent Bit sidecars

rrors are tagged for alerting and visualized in OCI dashboards




5. Log Rotation & Retention
og files inside containers are rotated using standard logging driver settings (max-size, max-file)

ogging has a 30-day retention window by default

rchive tier (optional) for long-term compliance/audits
6. Alerts
onitoring triggers alerts to Slack/email/SMS on:

igh error rates

token overuse

ector delays

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Health check failures
 7. Security Considerations in Monitoring
and document data are redacted before logging

enant boundaries are preserved in logs and metrics

ll logs are encrypted at rest in OCI














 
Configurations
1. Environment Variables (FastAPI Orchestrator)


Variable Name
	Description
	Source
	OPENAI_API_KEY
	API key to access Azure OpenAI
	OCI Vault
	OPENAI_ENDPOINT
	Azure OpenAI deployment endpoint
	.env or Vault
	OPENAI_DEPLOYMENT_ID
	GPT model deployment ID
	.env or Vault
	OKTA_ISSUER_URL
	Okta issuer (for JWT validation)
	Config file/Vault
	OKTA_AUDIENCE
	Expected audience in the JWT
	Config file
	SPRING_API_BASE_URL
	Base URL for Spring Boot microservices
	Config map / .env
	OBJECT_STORAGE_BUCKET
	Name of the bucket for uploaded files
	Helm chart/OCI
	TENANT_ID_HEADER
	Header used to pass tenant ID
	Static config
	ENABLE_FEATURE_FLAGS
	Toggle for per-tenant features
	ConfigMap
	

2. OCI Vault Secrets
These are retrieved at runtime using Instance Principals and never hardcoded or stored locally.
Secret Name
	Purpose
	openai-api-key
	Auth key for Azure OpenAI
	okta-client-secret
	Used if token introspection is needed
	oracle-db-creds
	Embedded worker read access (optional)
	

 3. Mapping & Transformation Configs


Config File
	Format
	Description
	mapping_rules.yaml
	YAML
	Maps LLM fields to internal schema fields
	template_detection_config
	YAML
	Used to route templates to appropriate mapping sets
	field_validators.yaml
	YAML
	Optional field-level validation rules
	

These are version-controlled per tenant and loaded by the SetupConfigurationEngine during /map.
4. Embedding Worker Config


Variable Name
	Description
	KAFKA_BROKER_URL
	Kafka endpoint (AWS MKS)
	KAFKA_TOPICS
	Comma-separated list of subscribed topics
	CHROMA_HOST
	Vector DB host (ChromaDB on OKE)
	VECTOR_TTL_DAYS
	Optional expiry for embeddings
	CDC_CONSUMER_GROUP_ID
	Kafka group ID for multi-worker setup
	5. Object Storage Paths


Path Convention
	Used For
	/<tenant_id>/documents/<file_id>.pdf
	Uploaded contract storage
	/<tenant_id>/extractions/<json_id>.json
	Parsed snapshot storage
	6. Helm Chart Values


Value Name
	Purpose
	image.tag
	Deployed image version
	envSecretsFromVault
	Inject secrets via Vault
	readinessProbe.path
	Health endpoint for orchestration
	replicaCount
	For scaling FastAPI services
	 7. Feature Flags
Feature flags are enabled on a per-tenant basis via config service or .yaml file:


Flag Name
	Description
	enable_global_search
	Enables similarity search bar
	enable_multi_template_support
	Handles multiple template mappings
	enable_feedback_ui
	Activates UI-based correction feedback
	

Deployment
1. Environments


Environment
	Purpose
	Features
	Development
	Local dev + internal testing
	Mock services, hot reload, relaxed auth/logging
	Staging
	Pre-prod validation
	Real APIs, real Azure OpenAI, lower rate limits
	Production
	Live customer traffic
	Full auth, rate-limits, monitoring, isolation
	

2. Deployment Tools & Automation


Tool
	Purpose
	Terraform
	Provisions cloud infra (OKE, Vault, NSGs)
	Helm
	Deploys FastAPI, embedding workers, ChromaDB
	GitHub Actions
	CI/CD pipeline for build, test, push to OCI Registry
	OCI CLI / SDK
	Secrets fetch, logging config
	Fluent Bit
	For log shipping from pods to OCI Logging
	Infrastructure as code is maintained in Terraform modules, allowing repeatable and auditable environment setup.(Keeping it as action item as good practise, scope is based on the time lines, implementation of present plan)
3. Containerization
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Services (FastAPI, Kafka consumers, UI proxies) are packaged as Docker containers.

uilt and tagged with Git commit hashes.

tored in OCI Container Registry and pulled by Kubernetes at deployment.

4. CI/CD Pipeline
On Code Push to Main Branch:


int, unit test, and build Docker image

ush image to OCI Container Registry



rigger Helm deployment to target namespace (dev, staging, or prod)

eplace image tag

ollout pods and verify readiness
Canary rollout with auto-rollback is supported via Helm hooks.
5. Prerequisites and Dependencies


Dependency
	Description
	OKE Cluster
	Oracle Kubernetes Engine (pre-created via Terraform)
	OCI Vault
	For storing and fetching secrets securely
	Object Storage
	For document uploads, template files
	Azure OpenAI
	External LLM used via API key + endpoint
	Spring Boot APIs
	Must be deployed and reachable inside OCI VCN
	AWS MKS (Kafka)
	Streaming service for CDC ingestion
	6. Deployment Security
elm charts load secrets dynamically from OCI Vault using Instance Principals.

is enforced for all ingress endpoints.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * K8s probes (/healthz) are used for liveness/readiness.
7. Rollback and Recovery
ailed deployments trigger Helm rollback to the last known good version.

ollbacks can be initiated manually or automatically (on probe failures).

ogs and traces are kept for all deployments via OCI Logging and OpenTelemetry.







Quality Assurance
 
Testing Strategy
1. Testing Types and Coverage
Test Type
	Purpose
	Tools/Frameworks
	Unit Tests
	Validate logic in isolation (parsers, mappers)
	pytest, unittest, mock
	Integration Tests
	Validate interaction between orchestrator, LLM, APIs
	FastAPI TestClient, httpx, local mocks
	Contract Tests
	Ensure extracted fields match API schema
	Pact, schema validators
	End-to-End (E2E)
	Simulate user flow (upload → extract → invoke)
	Postman / Playwright / Pytest
	CDC Pipeline Tests
	Test Kafka consumer + vector update logic
	Kafka + Pytest-based consumer tests
	Performance Tests
	Ensure latency and concurrency targets met
	locust, k6
	Security Tests
	Validate JWT, RBAC, auth bypass
	pytest + token scenarios
	Multi-tenant Isolation
	Ensure no data leakage between tenants
	Custom E2E + data snapshots
	2. Unit Testing Strategy
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Focused on:

ata extraction agent logic

apping dictionary transformations

ction identification logic

ncludes edge cases, nulls, misclassified fields

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * Mocked LLM calls to reduce cost during local/dev runs

 Goal: ≥ 90% code coverage on all pure functions/modules


3. Integration Testing
ests:

astAPI routes (/extract, /map, /identify, /invoke)

ecret access from OCI Vault

call/response to Spring Boot backend

token limit behaviors

Runs in CI/CD pipeline for each PR
4. End-to-End (E2E) Flow Validation
pload file → Extract → Map → Identify → Call Spring API

ncludes:

ile upload simulation

payload validation

utput assertion (mapped fields + API response)

 Run in staging before every release


5. CDC Vector Pipeline Testing
afka events (simulated Oracle CDC messages)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Validate:

ow serialization

mbedding request format

ector upsert

earch latency on top-K match
Test freshness SLA (<30s) with timestamp checks
6. Performance & Load Testing
ool: locust or k6

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Simulate:

concurrent users uploading files

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * Burst tests for /extract and /invoke

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Measure:

latency

rror rate

ystem resource utilization

Goal: Maintain p95 < ? under sustained load(Question to the Managers)


7. Security Testing
est cases:
issing/expired JWT

nvalid tenant claims

ole-restricted actions

ttempted cross-tenant document access
 Goal: No unauthorized access, full RBAC coverage
8. Failure Scenarios & Retry Testing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Simulate:

timeouts or quota errors

pring Boot API 500/timeout

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * Kafka unavailability

ssert:

etry logic

ircuit breakers triggered

ser receives meaningful error response
 9. Test Data and Fixtures
ample documents per template type (contracts, orders, invoices)

enant-scoped test data for multi-tenant flows

ock responses for LLM + downstream APIs















Test Cases
1. /extract Endpoint (Document Upload + Extraction)


TC ID
	Description
	Expected Result
	TC-001
	Upload valid PDF document
	Returns 200 with extracted_data in JSON
	TC-002
	

	Returns 200 with extracted fields
	TC-003
	Upload unsupported file format (.exe)
	Returns 400 with validation error
	TC-004
	Upload valid file without JWT
	Returns 401 Unauthorized
	TC-005
	Upload valid file with wrong tenant_id
	Returns 403 Forbidden
	TC-006
	Upload large document (50MB)
	Returns 200 within latency SLA
	TC-007
	Extract with invalid OpenAI key (simulate)
	Returns 502 with retry log, error in logs
	TC-008
	Simulate token overflow in LLM
	Truncates input, returns partial data
	

2. /map Endpoint (Transformation Rules & Mapping)


TC ID
	Description
	Expected Result
	TC-101
	Provide valid extracted_data payload
	Returns mapped object with keys like order_id
	TC-102
	Provide malformed JSON
	Returns 400 with parsing error
	TC-103
	Missing mapping config for tenant/template
	Returns 404 with message
	TC-104
	Provide unknown field in extracted data
	Returns warning + partial map
	TC-105
	Valid data with failed field validator (invalid date format)
	Returns 422 with field-level error
	3. /identify Endpoint (Action Detection)


TC ID
	Description
	Expected Result
	TC-201
	Provide valid document text
	Returns list of identified_actions
	TC-202
	Provide empty text
	Returns 400 or empty list
	TC-203
	Action not in known set
	Returns low confidence score or fallback
	TC-204
	Missing tenant context
	Returns 403 or 422
	TC-205
	Valid request with throttled OpenAI model
	Triggers retry logic + logs token error
	

4. /invoke Endpoint (Spring Boot API Calls)
TC ID
	Description
	Expected Result
	TC-301
	Provide valid action and payload
	Returns 200 with Spring API response
	TC-302
	Provide payload with missing field
	Returns 422 from orchestrator or Spring API
	TC-303
	Spring API is unavailable (simulate timeout)
	Returns 502 with retry or fallback
	TC-304
	JWT role does not allow this action
	Returns 403 Forbidden
	TC-305
	Tenant A tries to invoke Tenant B’s record
	Returns 403 — isolation enforced
	5. Authentication / RBAC / Tenant Isolation
TC ID
	Description
	Expected Result
	TC-401
	JWT expired
	Returns 401 Unauthorized
	TC-402
	JWT missing tenant_id claim
	Returns 403 Forbidden
	TC-403
	User with reader role invokes /invoke
	Returns 403 — action not allowed
	TC-404
	Cross-tenant file access
	Returns 403 — resource denied
	6. Vector Flow & Kafka Consumer (Background)


TC ID
	Description
	Expected Result
	TC-501
	Kafka CDC message → embedding worker
	Vector inserted into ChromaDB
	TC-502
	Kafka message with corrupted payload
	Error logged; message skipped or DLQ
	TC-503
	Embedding API throttled
	Retries with backoff, logs warning
	TC-504
	Vector metadata includes tenant ID
	Indexed and filterable on search
	TC-505
	New message → new vector in <30s
	Freshness SLA validated
	

7. Search & Query (Optional if /search exposed)


TC ID
	Description
	Expected Result
	TC-601
	Query with valid text
	Returns top-K matched entries
	TC-602
	Query with filter by tenant
	Filters applied, no leakage
	TC-603
	Search latency
	< 1s for top-K


	

8. Negative & Failure Scenarios


TC ID
	Description
	Expected Result
	TC-701
	Spring API returns 500
	Orchestrator wraps error + logs
	TC-702
	Vault secret fetch fails
	Startup fails or errors logged
	TC-703
	Object storage returns 403
	Upload denied, 403 returned
	TC-704
	Orchestrator pod crashes
	Restarted by Kubernetes, probes OK
	

Test Data
1. Document Uploads (Used in /extract, /identify)


File Name
	Type
	Description
	Tenant
	sample_contract_a.pdf
	PDF
	Valid contract document for one business unit
	tenant-a
	sample_invoice.docx
	DOCX
	Contains typical fields like invoice no., due date
	tenant-a
	bad_format.exe
	EXE
	Invalid format file to test rejection logic
	tenant-a
	missing_fields.pdf
	PDF
	Missing some known fields like “Effective Date”
	tenant-b
	oversized_file.pdf
	PDF
	5MB+ document to test upload limits
	tenant-a
	

2. Expected LLM Extraction Output (Mocked in Tests)


Input Field
	Expected LLM Output
	Notes
	“Invoice Number”
	"INV-00452"
	Extracted from header/footer
	“Start Date”
	"2025-06-01"
	ISO format expected
	“Customer Name”
	"Textainer pvt Ltd"
	Mapped to customers.name
	“Total Amount”
	"24,000"
	Should convert to decimal
	

3. Mapping Configurations


Field in LLM Output
	Mapped Field in DB
	Transformation Rule
	"Invoice Number"
	invoices.invoice_id
	String match
	"Start Date"
	contracts.valid_from
	Parse to ISO date
	"Customer Name"
	customers.customer_name
	Fuzzy match or strict string
	"Total Amount"
	orders.total_amount
	Strip comma → parse float
	

4. Sample Kafka CDC Events (Used in embedding pipeline tests)
5. Feedback Test Data


case
	Input
	Expected Outcome
	Corrected contract_no
	"ord-00452" → "ord-00453"
	PUT /feedback returns 200 OK
	Remove incorrect field
	"Effective Start Date" missing
	API reflects removal
	Submit from wrong tenant
	JWT mismatch
	403 Forbidden
	

 6. Tenant-Specific Configuration


Tenant
	Supported Templates
	Special Rules
	tenant-a
	Contract, Invoice templates
	Requires net-terms validation
	tenant-b
	Order, Master Service Template
	Supports multi-language doc parsing
	

7. Spring Boot API Mock Responses (for /invoke testing)
// Order creation success
{
  "status": "success",
  "order_id": "ORD567",
  "message": "Order created successfully"
}
// Contract update failure
{
  "status": "error",
  "error_code": "VALIDATION_FAILED",
  "details": "Missing billing start date"
}




Performance Test Data
1. Large-Scale Document Uploads
File Name
	Size
	Type
	Notes
	perf_contract_1.pdf
	~1MB
	PDF
	Medium complexity contract
	perf_invoice_1.pdf
	~3MB
	PDF
	Contains many line items (~100 rows)
	perf_contract_10.pdf
	~5MB
	PDF
	High-complexity legal contract
	batch_upload_50.zip
	50 docs
	PDF
	Used to simulate concurrent uploads
	Used for:
oad simulation (10–50 concurrent uploads)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * Measuring /extract and file handling latency

2. LLM Prompt & Output Payloads


Test File
	Input Prompt Tokens
	Expected Output Tokens
	Notes
	contract_excerpt.txt
	~800
	~600
	For OpenAI /extract tests
	long_invoice.txt
	~1600
	~1000
	High token usage test
	

Used for:
alidating LLM token caps

easuring extraction time under high token load

bserving retry/backoff on Azure token rate-limits
 3. Kafka CDC Message Load
Batch Name
	# of Records
	Event Type
	Notes
	cdc_orders_small.json
	100
	insert
	Low-volume freshness benchmark
	cdc_orders_heavy.json
	10,000
	mixed
	Spike load for embedding worker
	cdc_contracts_batch.json
	5000
	update
	Used for Kafka → embedding → vector tests
	Used for:
→ Vector freshness tracking (< 30s)

afka consumer lag under burst load
4. Parallel Search Queries


Input Query
	Concurrent Threads
	Notes
	"Where is the billing start?"
	10
	Simple query under load
	"Show contract obligations"
	25
	Mid-size load for /identify and /map
	"Retrieve latest orders"
	50
	High-load scenario with top-K search
	Used for:
oad-testing /identify and vector search speed

onitoring response time with simultaneous user traffic
5. Simulated Feedback Submissions
Batch Name
	Requests
	Payload Size
	Notes
	feedback_batch_1
	1000
	~2KB each
	Test /feedback latency
	feedback_spam_burst
	500
	malformed
	Tests error handling + rate limits
	Used for:
imulating UI-based feedback flood

easuring error-rate control under bad input
6. Multi-Tenant Configs


Tenant
	Template Type
	Volume
	tenant-a
	contracts-a
	1,000/day
	tenant-b
	Contracts-b
	3,000/day
	Used to verify:
ross-tenant throttling

solation in vector DB inserts and queries
 
System Profile / Label Testing
enant-Specific Configuration Data
         
Tenant ID
	Templates Enabled
	Feature Flags Enabled
	Expected Behavior
	tenant-a
	invoice
	feedback, global_search, multi_templates
	All features active; multiple templates supported
	tenant-b
	order
	feedback only
	Only extraction + mapping; global search disabled
	tenant-test
	contract
	None
	Minimal flow; search and feedback off
	Used to test:
onditional logic in /map, /feedback, /invoke

visibility of toggles

isabled routes returning 403 or 404
2.  Template Type Routing
File Name
	Expected Template Type
	Mapped Routing Action
	

	invoice_us_format.pdf
	invoice
	→ /invoke → /orders/create
	

	contract_germany.docx
	contract
	→ /map → updateContract()
	

	bad_template_sample.pdf
	unknown
	→ /identify fallback flow
	

	Used to test:
identify accuracy

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * Mismatched template rejection

allbacks and logs
3. Environment-Specific Behavior


Environment
	LLM Model
	Token Budget
	Feature Flags
	Expected Notes
	dev
	gpt-4o mock
	Unlimited
	All on
	Local stubbed OpenAI calls
	staging
	gpt-4o live
	Soft limit
	Some features gated
	Token logging + alerts enabled
	production
	gpt-4o live
	Enforced
	Stable features only
	Alerting and logging full scale
	



Used to validate:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Rate limits per environment

ifferent Vault configs (OpenAI key path, object store bucket)

anary vs stable feature behavior
4.  Feature Flag Testing Data
Feature Flag Name
	Tenant(s)
	Test Condition
	Expected Result
	enable_global_search
	tenant-a
	Search bar visible + /search works
	Returns top‑K matches
	enable_feedback_ui
	tenant-a, tenant-b
	UI feedback form shows
	/feedback returns 200
	enable_multi_templates
	tenant-a
	Multiple contract types supported
	Multiple YAML mappings processed
	enable_order_screen_ai_tag
	tenant-a
	AI‑tag visible in order screen
	Correct label/tag applied
	5.  Negative Test Data


Case Description
	Test Input / Scenario
	Expected Result
	Unknown tenant
	JWT with tenant_id: "ghost-999"
	403 Forbidden
	Disabled feature accessed manually
	Tenant without feedback flag hits /feedback
	403 or 404
	Template config missing
	Upload file with unknown layout
	/map fails with config not found
	Environment misconfiguration (vault path)
	Wrong secret reference
	Error on startup; logs with KeyError
	





Appendices
 
Appendix A: Glossary
Include a glossary of terms used in the document.
 
Appendix B: To-Be-Determined List
List any aspects of the design that are still under consideration.
 
________________


QA testing